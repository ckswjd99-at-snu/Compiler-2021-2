TYPE            : 'int', 'char'
VOID            : 'void'
NULL            : 'NULL'
STRUCT          : 'struct'
INTEGER_CONST   : integer
RETURN          : 'return'
IF              : 'if'
ELSE            : 'else'
WHILE           : 'while'
FOR             : 'for'
BREAK           : 'break'
CONTINUE        : 'continue'
LOGICAL_OR      : '||'
LOGICAL_AND     : '&&'
RELOP           : '<', '<=', '>', '>='
EQUOP           : '==', '!='
CHAR_CONST      : character
STRING          : string
INCOP           : '++'
DECOP           : '--'
STRUCTOP        : '->'

'[' ']' '(' ')' '.' STRUCTOP    : left
'!' INCOP DECOP      : right
'*' '/' '%'     : left
'+' '-'         : left
RELOP           : left
EQUOP           : left
'&'             : left
LOGICAL_AND     : left
LOGICAL_OR      : left
'='    : right
','             : left

program
		: ext_def_list
		;

ext_def_list
		: ext_def_list ext_def
		| /* empty */
		;

ext_def
		: type_specifier pointers ID ';'
		| type_specifier pointers ID '[' const_expr ']' ';'
		| func_decl ';'
		| type_specifier ';'
		| func_decl compound_stmt

type_specifier
		: TYPE
		| VOID
		| struct_specifier

struct_specifier
		: STRUCT ID '{' def_list '}'
		| STRUCT ID

func_decl
		: type_specifier pointers ID '(' ')'
		| type_specifier pointers ID '(' VOID ')'
		| type_specifier pointers ID '(' param_list ')'

pointers
		: '*'
		| /* empty */

param_list  /* list of formal parameter declaration */
		: param_decl
		| param_list ',' param_decl

param_decl  /* formal parameter declaration */
		: type_specifier pointers ID
		| type_specifier pointers ID '[' const_expr ']'

def_list    /* list of definitions, definition can be type(struct), variable, function */
		: def_list def
		| /* empty */

def
		: type_specifier pointers ID ';'
		| type_specifier pointers ID '[' const_expr ']' ';'
		| type_specifier ';'
		| func_decl ';'

compound_stmt
		: '{' local_defs stmt_list '}'

local_defs  /* local definitions, of which scope is only inside of compound statement */
		:	def_list

stmt_list
		: stmt_list stmt
		| /* empty */

stmt
		: expr ';'
		| compound_stmt
		| RETURN ';'
		| RETURN expr ';'
		| ';'
		| IF '(' expr ')' stmt
		| IF '(' expr ')' stmt ELSE stmt
		| WHILE '(' expr ')' stmt
		| FOR '(' expr_e ';' expr_e ';' expr_e ')' stmt
		| BREAK ';'
		| CONTINUE ';'

expr_e
		: expr
		| /* empty */

const_expr
		: expr

expr
		: unary '=' expr
		| or_expr

or_expr
		: or_list

or_list
		: or_list LOGICAL_OR and_expr
		| and_expr

and_expr
		: and_list

and_list
		: and_list LOGICAL_AND binary
		| binary

binary
		: binary RELOP binary
		| binary EQUOP binary
		| binary '+' binary
		| binary '-' binary
		| unary %prec '='

unary
		: '(' expr ')'
		| '(' unary ')' 
		| INTEGER_CONST
		| CHAR_CONST
		| STRING
		| ID
		| '-' unary	%prec '!'
		| '!' unary
		| unary INCOP
		| unary DECOP
		| INCOP unary
		| DECOP unary
		| '&' unary	%prec '!'
		| '*' unary	%prec '!'
		| unary '[' expr ']'
		| unary '.' ID
		| unary STRUCTOP ID
		| unary '(' args ')'
		| unary '(' ')'

args    /* actual parameters(function arguments) transferred to function */
		: expr
		| args ',' expr



